{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nimport math\nimport random\nfrom vexcode_vr import *\n\n# Brain should be defined by default\nbrain=Brain()\n\ndrivetrain = Drivetrain(\"drivetrain\", 0)\npen = Pen(\"pen\", 8)\npen.set_pen_width(THIN)\nleft_bumper = Bumper(\"leftBumper\", 2)\nright_bumper = Bumper(\"rightBumper\", 3)\nfront_eye = EyeSensor(\"frontEye\", 4)\ndown_eye = EyeSensor(\"downEye\", 5)\nfront_distance = Distance(\"frontdistance\", 6)\ndistance = front_distance\nmagnet = Electromagnet(\"magnet\", 7)\nlocation = Location(\"location\", 9)\n\n#endregion VEXcode Generated Robot Configuration\n\ndef Main():\n    #Setting pen to mark path and making the robot move faster\n    pen.move(DOWN)\n    drivetrain.set_drive_velocity(100,PERCENT)\n    drivetrain.set_turn_velocity(100, PERCENT)\n    pen.set_pen_color(BLUE)\n    solution = TraverseMaze()\n    drivetrain.stop()\n    #prints the unique coordinates the robot visited in its path\n    for item in solution:\n       brain.print(item)\n       brain.new_line()\n\n    #Displays the time taken for the robot to complete the maze\n    brain.print(brain.timer_time(SECONDS), \"Seconds\")\n    pen.set_pen_color(BLACK)\n    Return()\n    #Displays the time taken for the robot to return to beginning\n    brain.print(brain.timer_time(SECONDS), \"Seconds\")\n    \n    stop_project()\n\n\ndef Return():\n    while [location.position(X,MM), location.position(Y,MM)] != [130,-900]:\n        wait(50, MSEC)    \n        if front_eye.near_object():\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n        else:\n            #Check for if the robot would leave the maze at the end\n            if down_eye.detect(RED) and drivetrain.heading(DEGREES) == 0:\n                drivetrain.turn_for(LEFT, 90, DEGREES)\n            else:\n                drivetrain.drive_for(FORWARD, 250, MM)\n                drivetrain.turn_for(RIGHT, 90, DEGREES)\n\n\ndef TraverseMaze():\n    solution = [[130,-900]]\n\n    #Loop that performs a wall following algorith of the maze, hugging the right wall\n    while not down_eye.detect(RED):\n        wait(50, MSEC)    \n        if front_eye.near_object():\n            drivetrain.turn_for(LEFT, 90, DEGREES)\n        else:\n            #Check for if the robot would leave the maze at the start since for some reason you cant just use down_eye.detect(GREEN)\n            if location.position(X, MM) == 130 and location.position(Y, MM) == -900 and drivetrain.heading(DEGREES) == 180:\n                drivetrain.turn_for(LEFT, 90, DEGREES)\n            else:\n                drivetrain.drive_for(FORWARD, 250, MM)\n                drivetrain.turn_for(RIGHT, 90, DEGREES)\n                #Checks if the robot has been to this location before, if it has it will not add it to the solution\n                if [location.position(X,MM), location.position(Y,MM)] not in solution:\n                    solution.append([location.position(X,MM), location.position(Y,MM)])\n    \n    return solution\n\n\n\nvr_thread(Main)\n","textLanguage":"python","robotConfig":[],"slot":0,"platform":"PG","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"3.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"playground":"DynamicWallMaze","robotModel":"vr"}